#!/bin/bash
# @parseArger-begin
# @parseArger-help "add a new proompt" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-declarations
# @parseArger pos name "proompt name"
# @parseArger opt template-file "template file for the proompt"
# @parseArger opt description "description of the proompt"
# @parseArger opt tags "tags associated with the proompt" --repeat
# @parseArger opt template-content "content for the template file"
# @parseArger opt set-var "name to set a variable for the template" --repeat
# @parseArger opt set-var-value "value of the corresponding set-var" --repeat
# @parseArger opt prefix-mod "add default prefix mod to your proompt" --repeat --alias prefix --alias pm
# @parseArger opt suffix-mod "add default suffix mod to your proompt" --repeat --alias suffix --alias sm
# @parseArger opt proompts "existing proompts to use" --repeat --complete-custom "find \$PROOMPTY_DIR/proomplates/ -type f | sed 's|'\$PROOMPTY_DIR'/proomplates/||g'"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_name="";
# OPTIONALS ARGUMENTS
_arg_template_file=
_arg_description=
_arg_tags=()
_arg_template_content=
_arg_set_var=()
_arg_set_var_value=()
_arg_prefix_mod=()
_arg_suffix_mod=()
_arg_proompts=()
# FLAGS
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "add a new proompt:"
	echo -e "	name: proompt name"
	echo -e "	--template-file <template-file>: template file for the proompt"
	echo -e "	--description <description>: description of the proompt"
	echo -e "	--tags <tags>: tags associated with the proompt, repeatable"
	echo -e "	--template-content <template-content>: content for the template file"
	echo -e "	--set-var <set-var>: name to set a variable for the template, repeatable"
	echo -e "	--set-var-value <set-var-value>: value of the corresponding set-var, repeatable"
	echo -e "	--prefix-mod|--prefix|--pm <prefix-mod>: add default prefix mod to your proompt, repeatable"
	echo -e "	--suffix-mod|--suffix|--sm <suffix-mod>: add default suffix mod to your proompt, repeatable"
	echo -e "	--proompts <proompts>: existing proompts to use, repeatable"
	echo -e "Usage :
	$0 <name> [--template-file <value>] [--description <value>] [--tags <value>] [--template-content <value>] [--set-var <value>] [--set-var-value <value>] [--prefix-mod <value>] [--suffix-mod <value>] [--proompts <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--template-file)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_template_file="$2"
				shift
				;;
			--template-file=*)
				_arg_template_file="${_key##--template-file=}"
				;;
			
			--description)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_description="$2"
				shift
				;;
			--description=*)
				_arg_description="${_key##--description=}"
				;;
			
			--tags)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_tags+=("$2")
				shift
				;;
			--tags=*)
				_arg_tags+=("${_key##--tags=}")
				;;
			
			--template-content)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_template_content="$2"
				shift
				;;
			--template-content=*)
				_arg_template_content="${_key##--template-content=}"
				;;
			
			--set-var)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_set_var+=("$2")
				shift
				;;
			--set-var=*)
				_arg_set_var+=("${_key##--set-var=}")
				;;
			
			--set-var-value)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_set_var_value+=("$2")
				shift
				;;
			--set-var-value=*)
				_arg_set_var_value+=("${_key##--set-var-value=}")
				;;
			
			--pm|--prefix|--prefix-mod)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_prefix_mod+=("$2")
				shift
				;;
			--prefix-mod=*)
				_arg_prefix_mod+=("${_key##--prefix-mod=}")
				;;
			--prefix=*)
				_arg_prefix_mod+=("${_key##--prefix=}")
				;;
			--pm=*)
				_arg_prefix_mod+=("${_key##--pm=}")
				;;
			
			--sm|--suffix|--suffix-mod)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_suffix_mod+=("$2")
				shift
				;;
			--suffix-mod=*)
				_arg_suffix_mod+=("${_key##--suffix-mod=}")
				;;
			--suffix=*)
				_arg_suffix_mod+=("${_key##--suffix=}")
				;;
			--sm=*)
				_arg_suffix_mod+=("${_key##--sm=}")
				;;
			
			--proompts)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_proompts+=("$2")
				shift
				;;
			--proompts=*)
				_arg_proompts+=("${_key##--proompts=}")
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	name: ${_arg_name}";
	echo -e "	template-file: ${_arg_template_file}";
	echo -e "	description: ${_arg_description}";
	echo -e "	tags: ${_arg_tags[*]}";
	echo -e "	template-content: ${_arg_template_content}";
	echo -e "	set-var: ${_arg_set_var[*]}";
	echo -e "	set-var-value: ${_arg_set_var_value[*]}";
	echo -e "	prefix-mod: ${_arg_prefix_mod[*]}";
	echo -e "	suffix-mod: ${_arg_suffix_mod[*]}";
	echo -e "	proompts: ${_arg_proompts[*]}";

}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "$_SCRIPT_DIR/common";

# Check if a proompt with the same name already exists
proompt_file="$PROOMPTY_CONFIG_DIR/proomplates/$_arg_name"
if [ -f "$proompt_file" ]; then
  die "Proompt $_arg_name already exists."
fi

proompt_dir="$(dirname "$proompt_file")";
# Check if the proompt directory exsits
if [ ! -d "$proompt_dir" ]; then
	mkdir -p "$proompt_dir"
fi

if [ "$_arg_template_file" = "" ]; then
	_arg_template_file="$_arg_name";
fi

_tpl_dir="$(dirname "$_arg_template_file")";

# check if $_arg_template_file start with a /
if [[ ! $_arg_template_file == /* ]]; then
	_arg_template_file="$PROOMPTY_CONFIG_DIR/templates/$_arg_template_file"
	
	_tpl_dir="$(dirname "$_arg_template_file")";

	# Check if the template directory exsits
	if [ ! -d "$_tpl_dir" ]; then
		mkdir -p "$_tpl_dir"
	fi
	# Check if the template file exsits
	if [ ! -f "$_arg_template_file" ]; then
		touch "$_arg_template_file";
	fi
fi

# Check if the template parent directory exsits
if [ ! -d "$_tpl_dir" ]; then
	die "Template directory does not exist.\n\t$_tpl_dir"
fi
# Check if the template file exsits
if [ ! -f "$_arg_template_file" ]; then
	die "Template file does not exist.\n\t$_arg_template_file"
fi

# Create a new proompt file
echo "# Proompt: $_arg_name" > "$proompt_file"
# remove $_SCRIPT_DIR/../templates/

echo "proompt_template=${_arg_template_file#"$PROOMPTY_CONFIG_DIR/templates/"}" >> "$proompt_file"

# Add description
if [ "$_arg_description" = "" ]; then
	_arg_description="$_arg_name";
fi
echo "proompt_description='$_arg_description'" >> "$proompt_file"

# Add tags
_tags_str=""
for tag in "${_arg_tags[@]}"; do
	_tags_str+=" \"$tag\"";
done
echo "proompt_tags=($_tags_str)" >> "$proompt_file";

# add prefix mods
_pref_str=""
for mod in "${_arg_prefix_mod[@]}"; do
	_pref_str+=" \"$mod\"";
done
echo "proompt_prefix_mods=($_pref_str)" >> "$proompt_file";

# add suffix mods
_suf_str=""
for mod in "${_arg_suffix_mod[@]}"; do
	_suf_str+=" \"$mod\"";
done
echo "proompt_suffix_mods=($_suf_str)" >> "$proompt_file";

# add proompts
_proompts_str=""
for proompt in "${_arg_proompts[@]}"; do
	_proompts_str+=" \"$proompt\"";
done
echo "proompt_proompts=($_proompts_str)" >> "$proompt_file";

# Add default variables
echo "declare -A proompt_vars=()" >> "$proompt_file";
for var in "${!_arg_set_var[@]}"; do
	echo "proompt_vars[\"${_arg_set_var[$var]}\"]=\"${_arg_set_var_value[$var]}\"" >> "$proompt_file";
done

# Add optional template content
if [ "$_arg_template_content" != "" ]; then
  echo "$_arg_template_content" >> "$_arg_template_file"
fi

echo "Proompt $_arg_name has been added."
